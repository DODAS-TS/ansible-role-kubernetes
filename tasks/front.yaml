---
- name: Create a directory if it does not exist
  file:
    path: /etc/kubernetes/pki
    state: directory
    mode: '0755'

- name: Create auth data file with an admin user
  copy:
    content: '{{kube_admin_token}},{{kube_admin_username}},100,"users,system:masters"'
    dest: /etc/kubernetes/pki/auth
    mode: 600

- name: Kubeadm init
  command: kubeadm init --pod-network-cidr={{kube_pod_network_cidr}} --token={{kube_token}} --token-ttl {{kube_token_ttl}} --apiserver-advertise-address={{kube_api_server}} creates=/etc/kubernetes/admin.conf

- name: wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: install flannel
  block:
  - lineinfile:
      dest: /etc/sysctl.d/k8s.conf
      regexp: '^net.bridge.bridge-nf-call-iptables'
      line: 'net.bridge.bridge-nf-call-iptables = 1'
      create: yes
    notify: sysctl-system
  - get_url:
      url: https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
      dest: /etc/kube-flannel.yml
  - command: kubectl apply -f /etc/kube-flannel.yml creates=/etc/cni/net.d/10-flannel.conflist
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "flannel"

- name: install calico
  block:
  - get_url:
      url: https://docs.projectcalico.org/manifests/calico.yaml
      dest: /etc/kube-calico.yml
  #- copy:
  #    src: files/calico.yml
  #    dest: /etc/kube-calico.yml
  - command:  kubectl apply -f /etc/kube-calico.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "calico"

- include: helm.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_helm

- name: install metric-server
  block:
    - copy: src=metrics-server.yml dest=/tmp/metrics-server.yaml
    - command: kubectl apply -f /tmp/metrics-server.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_metrics

- name: Add Kube API server options
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    line: '    - {{item.option}}={{item.value}}'
    regexp: '^    - {{item.option}}='
    insertafter: '    - kube-apiserver'
  notify: restart kubeapi
  with_items: "{{ kube_apiserver_options }}"

- name: wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: Set iptables for ingress floatingIPs
  command: "{{item}}"
  with_items:
    - 'iptables -F'
    - 'iptables -A FORWARD -p tcp -d {{nginx_ingress.master_private_ip }} --dport 443 -j ACCEPT'
    - 'iptables -A FORWARD -p tcp -d {{nginx_ingress.master_private_ip }} --dport 80 -j ACCEPT'
    - 'iptables -t nat -A PREROUTING -p tcp -d {{nginx_ingress.master_public_ip }} --dport 443 -j DNAT --to-destination {{nginx_ingress.master_private_ip }}:443'
    - 'iptables -t nat -A PREROUTING -p tcp -d {{nginx_ingress.master_public_ip }} --dport 80 -j DNAT --to-destination {{nginx_ingress.master_private_ip }}:80'
    - 'iptables -t nat -A POSTROUTING ! -s 127.0.0.1 -j MASQUERADE'
    - 'iptables-save'

- name: wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: install nginx ingress
  block:
    - template:
        src: templates/nginx-values.yaml
        dest: /etc/nginx-ingress-values.yml
    - command: "{{ item }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      with_items:
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update
      - kubectl create namespace ingress-nginx
      - helm install ingress-nginx ingress-nginx/ingress-nginx --namespace=ingress-nginx --values /etc/nginx-ingress-values.yml
  when: nginx_ingress.enabled

- name: install cert manager and self-signed cert
  command: "{{ item }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  with_items:
      - helm repo add jetstack https://charts.jetstack.io
      - helm repo update
      - kubectl create namespace cert-manager
      - "helm install \
                  cert-manager jetstack/cert-manager \
                  --namespace cert-manager \
                  --version v1.1.0 \
                  --set installCRDs=true"
  when: nginx_ingress.enabled

- name: wait Cert-Manager to start
  wait_for:
    host: "cert-manager-webhook.cert-manager.svc"
    port: 443
  when: nginx_ingress.enabled

- name: install dashboard
  block:
    - copy:
        src: files/dashboard-cert.yaml
        dest: /etc/dashboard-cert.yml
    - template:
        src: templates/dashboard-values.yaml
        dest: /etc/dashboard-values.yml
    - command: "{{ item }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      with_items:
      - helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      - helm repo update
      - kubectl create namespace dashboard
      - kubectl create -f /etc/dashboard-cert.yml
      - helm install dashboard kubernetes-dashboard/kubernetes-dashboard --namespace=dashboard --values /etc/dashboard-values.yml
  when: nginx_ingress.enabled

- name: copy empty kubeconfig
  copy:
    src: files/kubeconfig
    dest: /etc/kubeconfig

# TODO wait for
#  wait_for:
#    

- name: create service account for remote access
  shell: |
    sleep 120 && kubectl -n kube-system create serviceaccount admin \
    && kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:admin \
    && sleep 30 \
    && export TOKENNAME=`kubectl -n kube-system get serviceaccount/admin -o jsonpath='{.secrets[0].name}'` \
    && export TOKEN=`kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}' | base64 -d` \
    &&  kubectl config --kubeconfig=/etc/kubeconfig set-credentials admin --token=$TOKEN \
    && kubectl config --kubeconfig=/etc/kubeconfig set-cluster public --server=https://{{ kube_api_server_public}}:6443 --insecure-skip-tls-verify \
    && kubectl config --kubeconfig=/etc/kubeconfig set-context public --cluster=public --namespace=default --user=admin \
    && kubectl config --kubeconfig=/etc/kubeconfig use-context public
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: register kubeconfig
  shell: kubectl config  --kubeconfig=/etc/kubeconfig view --raw
  register: kubeconfig
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: KUBECONFIG file
  debug:
    var: kubeconfig.stdout.split('\n')
