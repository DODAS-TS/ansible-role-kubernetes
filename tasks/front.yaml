---
- name: Create a directory if it does not exist
  file:
    path: /etc/kubernetes/pki
    state: directory
    mode: '0755'

- name: Create auth data file with an admin user
  copy:
    content: '{{kube_admin_token}},{{kube_admin_username}},100,"users,system:masters"'
    dest: /etc/kubernetes/pki/auth
    mode: 600

- name: Kubeadm init
  command: kubeadm init --pod-network-cidr={{kube_pod_network_cidr}} --token={{kube_token}} --token-ttl {{kube_token_ttl}} --apiserver-advertise-address={{kube_api_server}} creates=/etc/kubernetes/admin.conf

- name: wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: install flannel
  block:
  - lineinfile:
      dest: /etc/sysctl.d/k8s.conf
      regexp: '^net.bridge.bridge-nf-call-iptables'
      line: 'net.bridge.bridge-nf-call-iptables = 1'
      create: yes
    notify: sysctl-system
  - get_url:
      url: https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
      dest: /etc/kube-flannel.yml
  - command: kubectl apply -f /etc/kube-flannel.yml creates=/etc/cni/net.d/10-flannel.conflist
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "flannel"

- name: install calico
  block:
  - copy:
      src: files/calico.yml
      dest: /etc/kube-calico.yml
  - shell: POD_CIDR={{ kube_pod_network_cidr }} sed -i -e "s?192.168.0.0/16?$POD_CIDR?g" /etc/kube-calico.yml
  - command:  kubectl apply -f /etc/kube-calico.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "calico"

- include: helm.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_helm

- name: install kube-dashboard
  block:
    - copy: 
        src: files/kubernetes-dashboard.yml
        dest: /etc/kubernetes-dashboard.yaml
    - command: kubectl apply -f /etc/kubernetes-dashboard.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_deploy_dashboard == "k8s"

- name: install rancher-dashboard
  block:
    - copy: 
        src: files/rancher-dashboard.yml
        dest: /etc/rancher-dashboard.yaml
    - command: kubectl apply -f /etc/rancher-dashboard.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_deploy_dashboard == "rancher"

- name: install metric-server
  block:
    - copy: src=metrics-server.yml dest=/tmp/metrics-server.yaml
    - command: kubectl apply -f /tmp/metrics-server.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_metrics

- name: install nginx ingress
  block:
    - template:
        src: templates/nginx-ingress.yml
        dest: /etc/nginx-ingress.yml
    - command: kubectl apply -f /etc/nginx-ingress.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: nginx_ingress.enabled

# - name: Download git repo "{{ item.repo }}"
#   git:
#     repo: "{{ item.repo }}"
#     dest: "/tmp/{{ item.repo | basename }}"
#     version: "{{ item.version }}"
#   with_items: "{{ kube_apply_repos }}"

# - name: apply path "{{ item.path }}"
#   command: kubectl apply -f "{{ item.path }}" chdir="/tmp/{{ item.repo | basename }}"
#   environment:
#     KUBECONFIG: /etc/kubernetes/admin.conf
#   with_items: "{{ kube_apply_repos }}"

- name: Add Kube API server options
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    line: '    - {{item.option}}={{item.value}}'
    regexp: '^    - {{item.option}}='
    insertafter: '    - kube-apiserver'
  notify: restart kubeapi
  with_items: "{{ kube_apiserver_options }}"

- name: Reset iptables to blank slate
  command: "{{item}}"
  with_items:
    - 'iptables -F'
    - 'iptables-save'

- name: copy empty kubeconfig
  copy:
    src: files/kubeconfig
    dest: /etc/kubeconfig

- name: create service account for remote access
  shell: |
    sleep 120 && kubectl -n kube-system create serviceaccount admin \
    && kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:admin \
    && TOKENNAME=`kubectl -n kube-system get serviceaccount/admin -o jsonpath='{.secrets[0].name}'` \
    &&  TOKEN=`kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}' | base64 -d` \
    &&  kubectl config --kubeconfig=/etc/kubeconfig set-credentials admin --token=$TOKEN \
    && kubectl config --kubeconfig=/etc/kubeconfig set-cluster public --server=https://{{ kube_api_server_public}}:6443 --insecure-skip-tls-verify \
    && kubectl config --kubeconfig=/etc/kubeconfig set-context public --cluster=public --namespace=default --user=admin \
    && kubectl config --kubeconfig=/etc/kubeconfig use-context public
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: register kubeconfig    
  shell: kubectl config  --kubeconfig=/etc/kubeconfig view --raw
  register: kubeconfig
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: KUBECONFIG file
  debug:
    var: kubeconfig.stdout.split('\n')