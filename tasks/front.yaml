---
- name: Create a directory if it does not exist
  file:
    path: /etc/kubernetes/pki
    state: directory
    mode: '0755'

- name: Create auth data file with an admin user
  copy:
    content: '{{kube_admin_token}},{{kube_admin_username}},100,"users,system:masters"'
    dest: /etc/kubernetes/pki/auth
    mode: 600

- name: Kubeadm init
  command: kubeadm init --pod-network-cidr={{kube_pod_network_cidr}} --token={{kube_token}} --token-ttl {{kube_token_ttl}} --apiserver-advertise-address={{kube_api_server}} creates=/etc/kubernetes/admin.conf

- name: wait Kube to start
  wait_for:
    port: 6443

- name: setting sysctl network correctly for flannel
  lineinfile:
    dest: /etc/sysctl.d/k8s.conf
    regexp: '^net.bridge.bridge-nf-call-iptables'
    line: 'net.bridge.bridge-nf-call-iptables = 1'
    create: yes
  notify: sysctl-system

- name: get flannel manifest
  get_url:
    url: https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
    dest: /etc/kube-flannel.yml

- name: install flannel
  command: kubectl apply -f /etc/kube-flannel.yml creates=/etc/cni/net.d/10-flannel.conflist
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- include: helm.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_helm

- name: install kube-dashboard
  block:
    - copy: 
        src: files/kubernetes-dashboard.yml
        dest: /etc/kubernetes-dashboard.yaml
    - command: kubectl apply -f /etc/kubernetes-dashboard.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_deploy_dashboard

- name: install metric-server
  block:
    - copy: src=metrics-server.yaml dest=/tmp/metrics-server.yaml
    - command: kubectl apply -f /tmp/metrics-server.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_metrics

# - name: Download git repo "{{ item.repo }}"
#   git:
#     repo: "{{ item.repo }}"
#     dest: "/tmp/{{ item.repo | basename }}"
#     version: "{{ item.version }}"
#   with_items: "{{ kube_apply_repos }}"

# - name: apply path "{{ item.path }}"
#   command: kubectl apply -f "{{ item.path }}" chdir="/tmp/{{ item.repo | basename }}"
#   environment:
#     KUBECONFIG: /etc/kubernetes/admin.conf
#   with_items: "{{ kube_apply_repos }}"

- name: Add Kube API server options
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    line: '    - {{item.option}}={{item.value}}'
    regexp: '^    - {{item.option}}='
    insertafter: '    - kube-apiserver'
  notify: restart kubeapi
  with_items: "{{ kube_apiserver_options }}"

- name: Reset iptables to blank slate
  command: "{{item}}"
  with_items:
    - 'iptables -F'
    - 'iptables-save'

#- name: setup kubectl autocompletition
#  shell: echo 'source <(kubectl completion bash)' >> ~/.bashrc
